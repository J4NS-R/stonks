# store and retrieve stock accuracy data
# Expectation:
# - secrets.py: file with db login details
# - (store_acc): data/accuracies.csv - table with forecasting accuracies, generated by crunch.R
# Output:
# - (get_tickers): stdout - list of line-separated tickers
# - (get_acc_stats): stdout - table of accuracy statistics

import mysql.connector
import secrets
import sys
import csv
import datetime as dt


def print_tickers(cursor):
    cursor.execute('SELECT stock_name FROM tickers')
    for ticker in cursor.fetchall():
        print(ticker[0])


def store_accuracy(db):
    with open('data/accuracies.csv') as accfile:
        reader = csv.reader(accfile)

        sql = 'INSERT INTO accuracies (run_date, ticker, model, accuracy) ' \
              'VALUES (%s, %s, %s, %s)'

        vals = []
        models = None
        for row in reader:
            if models is None:
                models = row
                continue

            for i in range(1, len(row)):
                vals.append((dt.date.today(), row[0], models[i-1], row[i]))

        db.cursor().executemany(sql, vals)
        db.commit()


def get_accuracy_history(cursor):
    query = """
SELECT deriv.run_date, deriv.model, SUM(accuracy) AS err_sum, AVG(rel_acc) AS avg_rel_acc
FROM (
         SELECT a1.run_date, a1.model, a1.accuracy, best_accs.best_acc / a1.accuracy AS rel_acc
         FROM accuracies a1
                  INNER JOIN
              (
                  SELECT run_date, ticker, MIN(accuracy) AS best_acc
                  FROM accuracies
                  GROUP BY run_date, ticker
              ) AS best_accs
              ON best_accs.run_date = a1.run_date AND best_accs.ticker = a1.ticker
     ) AS deriv
GROUP BY deriv.run_date, deriv.model
ORDER BY deriv.run_date, deriv.model
    """
    cursor.execute(query)
    writer = csv.writer(sys.stdout)
    writer.writerow(['Arima', 'Drift', 'Holt'])

    wiprow = []; last_run_date = None
    for dbrow in cursor.fetchall():
        if dbrow[0] == last_run_date:
            wiprow.append(dbrow[3])
        else:
            if last_run_date is not None:  # flush previous
                writer.writerow(wiprow)
            wiprow = [dbrow[0], dbrow[3]]
            last_run_date = dbrow[0]
    writer.writerow(wiprow)


if __name__ == '__main__':

    if len(sys.argv) != 2:
        print('Wrong args. Must be one of [get_tickers, store_acc, get_acc_stats]')
        exit(1)

    db = mysql.connector.connect(
        host='localhost',
        user=secrets.DB_USER,
        password=secrets.DB_PWD,
        database=secrets.DB_NAME
    )

    if sys.argv[1] == 'get_tickers':
        print_tickers(db.cursor())
    elif sys.argv[1] == 'store_acc':
        store_accuracy(db)
    elif sys.argv[1] == 'get_acc_stats':
        get_accuracy_history(db.cursor())
    else:
        print('Unrecognised arg.')

    db.close()
